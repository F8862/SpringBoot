package com.smart.controller;

import java.io.File;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.security.Principal;
import java.util.List;
import java.util.Optional;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.ClassPathResource;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;

import com.smart.dao.ContactRepository;
import com.smart.dao.UserRepository;
import com.smart.entities.Contact;
import com.smart.entities.User;
import com.smart.helper.Message;

@Controller
@RequestMapping("/user")
public class UserController {
	@Autowired
	private BCryptPasswordEncoder bCryptPasswordEncoder;
	
	@Autowired
	private UserRepository userRepository;
	
	@Autowired
	private ContactRepository contactRepository;
	
	//method for adding common data to response
	@ModelAttribute
	public void addCommonData(Model model,Principal principal) {
		String username = principal.getName();
		System.out.println("username"+username);
		//get user using username(Email)
		User user = userRepository.getUserByUsername(username);
		//System.out.println("User"+user);
		model.addAttribute("user",user);
	}
	
	//dashboard home
	@RequestMapping("/index")
	public String dashboard(Model model,Principal principal) {
		model.addAttribute("title","User Dashboard");
		/*
		 * String username = principal.getName();
		 * System.out.println("username"+username); //get user using username(Email)
		 * User user = userRepository.getUserByUsername(username);
		 * System.out.println("User"+user); model.addAttribute("user",user);
		 */
		return "normal/user_dashboard";
	}
	
	//open add form handler
	@GetMapping("/add-contact")
	public String openAddContactForm(Model model) {
		model.addAttribute("title","Add Contact");
		model.addAttribute("contact", new Contact());
		return "normal/add_contact_form";
	}
	//processing add contact form
	@PostMapping("/process-contact")
	public String processContact(@ModelAttribute Contact contact,
			@RequestParam("profileImage") MultipartFile file,
			Principal principal,HttpSession session) {
		try {
		String name = principal.getName();
		User user = userRepository.getUserByUsername(name);
		//processing and uploading file
		if(file.isEmpty()) {
			System.out.println("File is empty");
			contact.setImage("contact.png");
		}else {
			//upload file into folder and update file name into db
			contact.setImage(file.getOriginalFilename());
			File saveFile = new ClassPathResource("static/img").getFile();
			Path path = Paths.get(saveFile.getAbsolutePath()+File.separator+file.getOriginalFilename());
			Files.copy(file.getInputStream(), path, StandardCopyOption.REPLACE_EXISTING);
			System.out.println("Image is uploaded");
		}
		contact.setUser(user);
		user.getContacts().add(contact);
		userRepository.save(user);
		System.out.println("DATA" +contact);
		System.out.println("Added to DB");
		//message success.....
		session.setAttribute("message", new Message("Your contact is added!! Add more","success"));
		} catch (Exception e) {
			System.out.println("ERROR"+e.getMessage());
			e.printStackTrace();
			//message error.....
			session.setAttribute("message", new Message("Something went wrong","danger"));
		}
		return "normal/add_contact_form";
	}
	
	//show contact handler
	@GetMapping("/show_contacts/{page}")
	public String showContacts(@PathVariable("page") Integer page, Model model,Principal principal) {
		model.addAttribute("title","Show User Contacts");
		//sending user contact list
		/*
		 * String userName = principal.getName(); User user =
		 * userRepository.getUserByUsername(userName); List<Contact>
		 * contacts=user.getContacts();
		 */
		String userName = principal.getName();
		//User user = this.userRepository.getUserByUsername(userName);
		Pageable pageable = PageRequest.of(page, 3);
		User user = this.userRepository.getUserByUsername(userName);
		//List<Contact> contacts = this.contactRepository.findContactByUesr(user.getId());
		Page<Contact> contacts = this.contactRepository.findContactByUesr(user.getId(),pageable);
		model.addAttribute("contacts",contacts);
		model.addAttribute("currentPage",page);
		model.addAttribute("totalPages",contacts.getTotalPages());
		return "normal/show_contacts";
		
	}
	
	//showing contact details after clicking on email
	@GetMapping("/{cId}/contact")
	public String showingContactDetail(@PathVariable("cId") Integer cId,Model model,Principal principal) {
		System.out.println("CID "+cId);
		Optional<Contact> contactOptional = this.contactRepository.findById(cId);
		Contact contact = contactOptional.get();
		String userName = principal.getName();
		User user = this.userRepository.getUserByUsername(userName);
		if(user.getId()==contact.getUser().getId()) {
		model.addAttribute("contact",contact);
		model.addAttribute("title",contact.getName());
		}
		return "normal/contact_detail";
	}
	
	//delete contact handler
	@GetMapping("/delete/{cId}")
	public String deleteContact(@PathVariable("cId") Integer cId,Model model,HttpSession session,Principal principal) {
		Optional<Contact> contactOptional = this.contactRepository.findById(cId);
		Contact contact = contactOptional.get();
		/*
		 * contact.setUser(null); //unlink the contact from user
		 * this.contactRepository.delete(contact);
		 */
		User user = this.userRepository.getUserByUsername(principal.getName());
		user.getContacts().remove(contact);
		this.userRepository.save(user);
		session.setAttribute("message", new Message("Contact Deleted successfully!!","success"));
		return "redirect:/user/show_contacts/0";
		
	}
	
	//open user update form handler
	@PostMapping("/update-contact/{cId}")
	public String updateForm(@PathVariable("cId") Integer cId,Model model) {
		model.addAttribute("title","Update Contact");
		Contact contact = this.contactRepository.findById(cId).get();
		model.addAttribute("contact",contact);
		return "normal/update_form";
		
	}
	
	//update contact handler
	@RequestMapping(value = "/process-upate",method = RequestMethod.POST)
	public String updateHandler(@ModelAttribute Contact contact,@RequestParam("profileImage") MultipartFile file,Model model,HttpSession session,Principal principal) {
		try {
			//fetch old contact details
			Contact oldContactDetails = this.contactRepository.findById(contact.getcId()).get();
			if(!file.isEmpty()) {
				//delete old photo
				File deleteFile = new ClassPathResource("static/img").getFile();
				File file1=new File(deleteFile,oldContactDetails.getImage());
				file1.delete();				//update new photo
				File saveFile = new ClassPathResource("static/img").getFile();
				Path path = Paths.get(saveFile.getAbsolutePath()+File.separator+file.getOriginalFilename());
				Files.copy(file.getInputStream(), path, StandardCopyOption.REPLACE_EXISTING);
				contact.setImage(file.getOriginalFilename());
			}else {
				contact.setImage(oldContactDetails.getImage());
			}
			User user=this.userRepository.getUserByUsername(principal.getName());
			contact.setUser(user);
			this.contactRepository.save(contact);
			session.setAttribute("message",new Message("Your Contact is successfully updated..", "success"));
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		
		System.out.println("Contact Name"+contact.getName());
		return "redirect:/user/"+contact.getcId()+"/contact";
		
	}
	
	//your profile
	@GetMapping("/profile")
	public String yourProfile(Model model) {
		model.addAttribute("tiltle", "profile page");
		return "normal/profile";
		
	}
	
	//open setting handler
	@GetMapping("/settings")
	public String openSetting() {
		return "normal/settings";
		
	}
	
	//change password handler
	@PostMapping("/change-password")
	public String changePassword(@RequestParam("oldPassword") String oldPassword,@RequestParam("newPassword") String newPassword,Principal principal,HttpSession session) {
		System.out.println("OLD PASSWORD " +oldPassword);
		System.out.println("NEW PASSWORD " +newPassword);
		String userName = principal.getName();
		User currentUser = this.userRepository.getUserByUsername(userName);
		if(bCryptPasswordEncoder.matches(oldPassword, currentUser.getPassword())) {
			//change the password
			currentUser.setPassword(this.bCryptPasswordEncoder.encode(newPassword));
			this.userRepository.save(currentUser);
			session.setAttribute("message", new Message("Your Password is successfully changed","success"));

			
		}else {
			//error....
			session.setAttribute("message", new Message("Please enter valid old password","danger"));
			return "redirect:/user/settings";
		}
		return "redirect:/user/index";
	}
	

}
